---
- name: Output users_system variable
  debug:
    var: '{{ users_system }}'

- name: Ensure parent home directories exist
  file:
    path: "{{ (item.home | default('/home/'+item.name)) | dirname }}"
    state: directory
  when: (item.name is defined and item.name != 'root' and
        (item.state is not defined or item.state != 'absent') and
        (item.name not in users_remove))
  with_items: '{{ users_system + users_admin + users_normal }}'


- name: Ensuer system users exist
  user:
    name: "{{ item.name }}"
    uid: "{{ item.uid | default(omit) }}"
    group: "{{ item.group | default(item.name) }}"
    groups: "{{ item.groups | join(',') if item.groups is defined else omit }}"
    state: present
    system: yes
  when: (item.name is defined and item.name != 'root' and
        (item.state is not defined or item.state != 'absent') and
        (item.name not in users_remove))
  with_items: '{{ users_system }}'

- name: Ensure admin users exist
  user:
    name: "{{ item.name }}"
    uid: "{{ item.uid | default(omit) }}"
    group: "{{ item.group | default(item.name) }}"
    groups: "{{ item.groups | join(',') if item.groups is defined else omit }}"
    state: 'present'
    system: no
    password: "{{ item.password | default(omit) }}"
    update_password: "{{ item.update_password | default('on_create') }}"
    shell: "{{ item.shell | default('/bin/bash') }}"
    home: "{{ item.home | default('/home/'+item.name) }}"
    createhome: "{{ item.createhome | default('yes') }}"
    expires: "{{ item.expires | default(omit) }}"
  changed_when: item.update_password is defined and item.update_password != 'always'
  when: (item.name is defined and item.name != 'root' and
        (item.state is not defined or item.state != 'absent') and
        (item.name not in users_remove))
  with_items: '{{ users_admin }}'

- name: Ensure normal users exist
  user:
    name: "{{ item.name }}"
    uid: "{{ item.uid | default(omit) }}"
    group: "{{ item.group | default(item.name) }}"
    groups: "{{ item.groups | join(',') if item.groups is defined else omit }}"
    state: 'present'
    system: no
    password: "{{ item.password | default(omit) }}"
    update_password: "{{ item.update_password | default('on_create') }}"
    shell: "{{ item.shell | default('/bin/bash') }}"
    home: "{{ item.home | default('/home/'+item.name) }}"
    createhome: "{{ item.createhome | default('yes') }}"
    expires: "{{ item.expires | default(omit) }}"
  ignore_errors: true # Some users might be in use
  changed_when: item.update_password is defined and item.update_password != 'always'
  when: (item.name is defined and item.name != 'root' and
        (item.state is not defined or item.state != 'absent') and
        (item.name not in users_remove))
  with_items: '{{ users_normal }}'


- name: Remove state=absent users
  user:
    name: "{{ item.name }}"
    state: 'absent'
    password: "{{ (item.name + ansible_machine_id) | hash('sha1') }}"
    update_password: 'always'
    group: 'nogroup'
    groups: []
    shell: /bin/nologin
    force: true
    append: no
    remove: true
    comment: 'disabled'
  ignore_errors: true
  changed_when: false
  when: (item.name is defined and item.name != 'root' and
        (item.state is defined and item.state == 'absent'))
  with_flattened:
    - '{{ users_system }}'
    - '{{ users_admin }}'
    - '{{ users_normal }}'

- name: Ensure deleted users in users_remove are removed
  user:
    name: "{{ item }}"
    state: 'absent'
    password: "{{ (item + ansible_machine_id) | hash('sha1') }}"
    update_password: 'always'
    group: 'nogroup'
    groups: []
    shell: /bin/nologin
    force: true
    append: no
    remove: true
    comment: 'disabled'
  ignore_errors: true
  when: item != 'root'
  with_items: '{{ users_remove }}'

# ------ disabled as ssh user have no write access in home folder
#- name: Set mode on home directories
#  file:
#    path: "{{ item.home | default('/home/'+item.name) }}"
#    mode: '{{ item.mode }}'
#    owner: root
#    group: root
#  when: ((item.mode is defined and item.home is defined) and
#        (item.name is defined and item.name != 'root') and
#        (item.state is not defined or item.state != 'absent') and
#        (item.name not in users_remove))
#  with_items: '{{ users_normal }}'
